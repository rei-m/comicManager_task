/**************************************************************************************************
 * モジュール名　:
 * 概要　　　　　:
 * 作成日　　　　: 2014/03/05
 * 更新日　　　　: yyyy/MM/dd
 *************************************************************************************************/

// モジュール読み込み
var client = require('cheerio-httpcli'),
    dateformat = require("dateformat"),
    constComic = require("mod/constComic"),
    logger = require('mod/logger');

exports.getAndSaveComicList = function(db){

  var FUNCTION_NAME = "getAndSaveComicList";

  // 処理開始
  logger.info(FUNCTION_NAME + " START");

  // スクレイピング開始
  logger.info("GET " + constComic.SALES_URL);
  client.fetch(constComic.SALES_URL, {}, function(_e, $, _res) {
    if (!_e && _res.statusCode === 200) {
      // 取得したレスポンスから登録するコミックリストを取得する
      var _aryTargetUrl = [];
      $("table").find("a").each(function(){
        var _href = $(this).attr("href");
        if(_href.indexOf("ComicSyuppan") > 0){
          _aryTargetUrl.push(_href);
        }
      });
      if(0 < _aryTargetUrl.length){
        getAndSaveComicListDtl(_aryTargetUrl, 0, db);
      }
    }else{
      logger.error(FUNCTION_NAME + " Bad Request");
    }

    // 処理終了
    logger.info(FUNCTION_NAME + " END");

  });
};

function getAndSaveComicListDtl(aryUrl, currentIdx, db){

  var FUNCTION_NAME = "getAndSaveComicListDtl";

  // 処理開始
  logger.info(FUNCTION_NAME + " START");

  // スクレイピング開始
  logger.info("GET " + aryUrl[currentIdx]);
  client.fetch(aryUrl[currentIdx],{}, function(_e, $, _res) {
    if (!_e && _res.statusCode === 200) {
      var upsertComicList = [];
      $("tr").each(function(_idx){
        var _$this = $(this);
        if(_$this.attr("align") === "left"){
          var _$tds = _$this.find("td");
          if(_$tds.length === 6){
            var _salesYmd = trimUnusedChar(_$tds.eq(1).text()),
                _title = trimUnusedChar(_$tds.eq(3).text()),
                _publisher = trimUnusedChar(_$tds.eq(0).text()),
                _author = trimUnusedChar(_$tds.eq(4).text());
            _author = _author.split("/著").join("");
            var _key = _title.split(" ").join("") + "|" + _author.split(" ").join("");
            _key = _key.toLowerCase();

            var _salesY = _salesYmd.substr(0,4),
                _salesM = _salesYmd.substr(4,2),
                _salesD = _salesYmd.substr(6,2),
                _salesDate = new Date(_salesY+"-"+_salesM+"-"+_salesD + "T00:00:00.000+09:00");
            upsertComicList.push({
              title:_title,
              salesDate:_salesDate,
              salesY:_salesY,
              salesM:_salesM,
              salesD:_salesD,
              author:_author,
              publisher:_publisher,
              key:_key
            });
          }
        }
      });

      // データ登録処理
      if(0 < upsertComicList.length){
        updateSalesComicList(db, upsertComicList);
      }

      currentIdx++;
      if(currentIdx < aryUrl.length){
        setTimeout(function(){
          getAndSaveComicListDtl(aryUrl, currentIdx, db);
        }, 2000);
      }
    }else{
      logger.error(FUNCTION_NAME + " Bad Request");
    }

    // 処理終了
    logger.info(FUNCTION_NAME + " END");

  });
}

function trimUnusedChar(in_str){
  return in_str
            .split("\n").join("")
            .split("　").join(" ")
            .trim();
}

function updateSalesComicList(db, updateComicList){
  var _comicCnt = updateComicList.length,
      _upsertCnt = 0;
  // DBへの接続
  db.open(function(err, db){
    if(err){
      throw err;
    }
    // コレクションを指定
    var collection = db.collection("salesinfos");

    // MongoDBに登録（upsert、同一のタイトルが無ければ新規登録、あれば更新）
    for(var _i=0;_i<_comicCnt;_i++){
      collection.update(
        {title:updateComicList[_i].title},
        updateComicList[_i],
        {upsert:true},
        function(err){
          if(err){
            logger.warn(err.message);
          }
          _upsertCnt++;
          if(_upsertCnt === _comicCnt){
            db.close();
            logger.info("UPDATE : " + _comicCnt + "件");
          }
      });
    }
  });
}