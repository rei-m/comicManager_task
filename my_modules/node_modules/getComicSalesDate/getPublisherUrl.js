/**************************************************************************************************
 * モジュール名　: 出版社別新刊情報ページURL取得処理
 * 概要　　　　　: スクレイピングして出版社別の新刊情報ページのURLを取得する
 *************************************************************************************************/

// モジュール読み込み
var Q = require('q'),
    client = require('cheerio-httpcli'),
    CONST = require('getComicSalesDate/const');

/*
 * 出版社別新刊情報URL取得処理
 * 概　要 : スクレイピングして出版社別の新刊情報ページのURLを取得する
 * 引　数 : なし
 * 戻り値 : promise（resolve：スクレイピングで取得したURLリスト）
 */
function getPublisherUrl(){

  var _d = Q.defer();

  Q.when()
    // 出版社別ページURL取得
    .then(sendRequest)
    .fail(_d.reject)
    // 取得したURLリストを次の処理に渡して終了
    .done(_d.resolve);

  return _d.promise;
}

/*
 * リクエスト送信処理
 * 概　要 : 指定のURLにスクレイピングを行い、URLリストを取得する
 * 引　数 : なし
 * 戻り値 : promise（resolve：スクレイピングで取得したURLリスト）
 */
function sendRequest(){

  var _d = Q.defer();

  // スクレイピング開始
  client.fetch(CONST.SALES_URL, {}, function(in_err, $, in_res) {

    // 正常終了の場合のみ情報を取得する
    if (!in_err && in_res.statusCode === 200) {

      var _aryTargetUrl = [];   // URL格納用

      // aタグを拾い、ComicSyuppanが含まれているURLを取得する
      $('table').find('a').each(function(){
        var _href = $(this).attr('href');
        if(_href.indexOf('ComicSyuppan') > 0){
          _aryTargetUrl.push(_href);
        }
      });

      // 取得出来ていればURLリスト渡して次の処理へ
      if(0 < _aryTargetUrl.length){
        _d.resolve(_aryTargetUrl);
      }else{
        _d.reject('PublisherList is none');
      }
    }else{
      _d.reject('Bad Request');
    }
  });

  return _d.promise;
}

module.exports = getPublisherUrl;