/**************************************************************************************************
 * モジュール名　: 新刊情報取得処理
 * 概要　　　　　: スクレイピングして出版社毎の新刊情報を取得する
 *************************************************************************************************/

// モジュール読み込み
var Q = require('q'),
    client = require('cheerio-httpcli'),
    dateFunc = require('cmn/dateFunc');
/*
 * 新刊情報取得処理
 * 概　要 : スクレイピングして出版社毎の新刊情報を取得する
 * 引　数 : in_urlList 出版社別新刊情報URLリスト
 * 戻り値 : promise（resolve：スクレイピングで取得した新刊情報）
 */
function getSalesInfo(in_urlList){

  var _d = Q.defer(),
      _args ={
        idx : 0,  // 取得対象URLリストアクセス用
        urlList : in_urlList, // 取得対象URLリスト
        comicList : []   // 新刊情報リスト格納用
      },
      _q = Q.when(_args); // deferred制御用キュー

  // 取得対象のURL分、スクレイピング処理をキューに格納
  for(var i=0, len=in_urlList.length;i<len;i++){
    _q = _q
      .then(sendRequest)
      .fail(_d.reject);
  }
  // 全て取得し終わったらresolveにして取得した新刊情報を次の処理に渡す
  _q.done(function(in_args){
    _d.resolve(in_args.comicList);
  });
  // promiseを返却
  return _d.promise;
}

/*
 * リクエスト送信処理
 * 概　要 : 指定のURLにスクレイピングを行い、新刊情報を取得する
 * 引　数 : in_args 引数オブジェクト
 * 戻り値 : promise（resolve：スクレイピングで取得した新刊情報）
 */
function sendRequest(in_args){

  var _d = Q.defer(),
      _targetUrl = in_args.urlList[in_args.idx];  // 対象のURLを取得

  // スクレイピング開始
  client.fetch(_targetUrl,{}, function(in_err, $, in_res) {

    // 正常終了の場合のみ情報を取得する
    if (!in_err && in_res.statusCode === 200) {
      $('tr').each(function(_idx){
        var _$this = $(this);
        if(_$this.attr('align') === 'left'){
          var _$tds = _$this.find('td');
          if(_$tds.length === 6){
            var _salesYmd = trimUnusedChar(_$tds.eq(1).text()), // 発売日
                _title = trimUnusedChar(_$tds.eq(3).text()),  // タイトル
                _publisher = trimUnusedChar(_$tds.eq(0).text()),  // 出版社
                _author = trimUnusedChar(_$tds.eq(4).text()); // 作者

            // 作者から不要な文字を除外
            _author = _author.split('/著').join('');
            // 検索用のキーを作成
            var _key = _title.split(' ').join('') + '|' + _author.split(' ').join('');
            _key = _key.toLowerCase();
            // 発売日を年月日に分割
            var _salesY = _salesYmd.substr(0,4),
                _salesM = _salesYmd.substr(4,2),
                _salesD = _salesYmd.substr(6,2);

            // 新刊情報リストに登録
            in_args.comicList.push({
              title : _title,
              salesDate : dateFunc.makeGMTDate(_salesYmd),
              salesY : _salesY,
              salesM : _salesM,
              salesD : _salesD,
              author : _author,
              publisher : _publisher,
              key:_key
            });
          }
        }
      });
    }else{
      _d.reject('Bad Request');
    }

    // サイトへの負荷を考慮してWAITしてから次の処理へ
    setTimeout(function(){
      in_args.idx++;
      _d.resolve(in_args);
    }, 2000);
  });

  return _d.promise;
}

/*
 * 不要文字除外処理
 * 概　要 : 改行を取り除き、全角スペースを半角スペースに変換する
 * 引　数 : in_str 変換対象の文字列
 * 戻り値 : 返還後の文字列
 */
function trimUnusedChar(in_str){
  return in_str
            .split('\n').join('')
            .split('　').join(' ')
            .trim();
}

module.exports = getSalesInfo;