/**************************************************************************************************
 * モジュール名　: コミックリスト情報取得処理
 * 概要　　　　　: Wikipediaの漫画一覧をスクレイピングしてコミックリスト情報を取得する
 *************************************************************************************************/

// モジュール読み込み
var Q = require('q'),
    client = require('cheerio-httpcli'),
    logger = require('cmn/logger'),
    CONST = require('getComicMaster/const'),
    cmnDtlFunc = require('getComicMaster/cmnDtlFunc');

// 定数
var ARY_REQ_INFO = CONST.ARY_REQ_INFO;

/*
 * コミックリスト情報取得処理
 * 概　要 : WikipediaのURLリストからコミックマスタ情報を取得する
 * 引　数 : なし
 * 戻り値 : promise（resolve：スクレイピングで取得したコミック情報）
 */
function getComicList(){

  var _d = Q.defer(),
      _args = {
        idx : 0,  // 取得対象URLリストアクセス用
        comicList : []  // 取得済コミックリスト格納用
      },
      _q = Q.when(_args); // deferred制御用キュー

  // 取得対象のURL分、スクレイピング処理をキューに格納
  for(var i=0, len=ARY_REQ_INFO.length;i<len;i++){
    _q = _q.then(getComicInfo);
  }
  // 全て取得し終わったらresolveにして取得したコミック情報を次の処理に渡す
  _q.done(function(){
    _d.resolve(_args.comicList);
  });
  // promiseを返却
  return _d.promise;
}

/*
 * コミック情報取得処理
 * 概　要 : 一件分のWikipediaのURLからコミックマスタ情報を取得する
 * 引　数 : in_args {URLリストアクセス用Index、取得結果格納用リスト}
 * 戻り値 : promise（resolve：呼び出し時の引数）
 */
function getComicInfo(in_args){

  var _d = Q.defer();

  // リクエスト情報をセット
  var _reqInfo = ARY_REQ_INFO[in_args.idx];

  // スクレイピング開始
  client.fetch(_reqInfo.url, {}, function(in_err, $, in_res) {

    // 正常終了の場合のみ情報を取得する
    if (!in_err && in_res.statusCode === 200) {
      // 取得結果からコミック情報を抽出して取得済みのリストと結合
      in_args.comicList = in_args.comicList.concat(extractComicInfo($, _reqInfo));
    }else{
      // エラーが発生している、またはレスポンスコードが200以外の場合はエラー処理
      logger.error('Bad Request');
    }
    // 終わったら次のURLへ
    in_args.idx++;
    _d.resolve(in_args);
  });

  return _d.promise;
}

/*
 * コミック情報抽出処理
 * 概　要 : スクレイピングの取得結果からコミック情報を抽出する
 * 引　数 : $ スクレイピングの取得結果
 * 　　　 : in_reqInfo スクレイピングのリクエスト情報
 * 戻り値 : _upsertComicList 抽出したコミックリスト情報
 */
function extractComicInfo($, in_reqInfo){

  var _upsertComicList = [];  // 更新対象コミック情報格納用

  // タイトル・作者・出版社を抽出
  $('ul').each(function(_idx){
    // 取得対象範囲内か判定
    if(in_reqInfo.idxF <= _idx && _idx <= in_reqInfo.idxT){
      // liが１件分のコミック情報を保持している。１冊ずつ必要な情報を抽出する
      var $li = $(this).find('li');
      $li.each(function(){

        var _title = $(this).find('a').eq(0).text(),  // タイトル
            _publisher = '',  // 出版社
            _author = ''; // 作者
        // 出版社・作者抽出用
        var _etc = $(this).text().substr(_title.length)
            .split('　').join('')
            .split(' ').join('')
            .slice(1, -1),
            _aryEtc = _etc.split('、');
        // 出版社が登録されているコミックとされていないコミックを配列の要素数で判定
        if(_aryEtc.length > 1){
          // 出版社と作者を取得
          _publisher = _aryEtc[_aryEtc.length - 1];
          _aryEtc.pop();
          _author = _aryEtc.join(' ');
        }else{
          // 出版社が無いレコードは作者のみを取得
          _author = _etc;
        }
        // 全角スペースは半角スペースに置換
        _title = _title.split('　').join(' ');
        _publisher = _publisher.split('　').join(' ');
        _author = _author.split('　').join(' ');

        // 更新対象としてリストに保存
        _upsertComicList.push({
          title:_title,
          publisher:_publisher,
          author:_author,
          key:cmnDtlFunc.makeSearchKey(_title, _author)
        });
      });
    }
  });

  return _upsertComicList;
}

// コミックリスト情報取得処理を公開
module.exports = getComicList;