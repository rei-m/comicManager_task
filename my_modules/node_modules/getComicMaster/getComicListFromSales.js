/**************************************************************************************************
 * モジュール名　: 新刊マスタ情報取得処理
 * 概要　　　　　: 登録済みの新刊情報からコミックマスタ情報を取得する
 *************************************************************************************************/

// モジュール読み込み
var Q = require('q'),
    connDb = require('cmn/connDb'),
    dateFunc = require('cmn/dateFunc'),
    cmnDtlFunc = require('getComicMaster/cmnDtlFunc');

/*
 * 新刊コミック情報取得処理
 * 概　要 : 取得済の新刊情報からマスタ情報を取得する
 * 引　数 : in_comicList Wikipediaから取得したコミックリスト
 * 　　　 : in_db データベースオブジェクト
 * 戻り値 : promise（resolve：新刊情報から取得したコミック情報を追加したコミックリスト）
 */
function getComicListFromSales(in_comicList, in_db){

  var _d = Q.defer();

  Q.when(in_db)
    // データベースオープン
    .then(connDb.openDb)
    .fail(_d.reject)
    // 新刊情報取得
    .then(function(in_conn){
      return getSalesInfos(in_comicList, in_conn);
    })
    .fail(_d.reject)
    // データベースをクローズして次の処理へ
    .done(function(in_comicList){
      in_db.close();
      _d.resolve(in_comicList);
    });

  return _d.promise;
}

/*
 * 新刊コミック情報取得処理
 * 概　要 : 取得済の新刊情報からマスタ情報を取得する
 * 引　数 : in_comicList Wikipediaから取得したコミックリスト
 * 　　　 : in_conn コネクション
 * 戻り値 : promise（resolve：新刊情報から取得したコミック情報を追加したコミックリスト）
 */
function getSalesInfos(in_comicList, in_conn){

  var _d = Q.defer();
  var collection = in_conn.collection('salesinfos');
  var date = new Date(),
      year = date.getFullYear()+'',
      month = date.getMonth()+1+'';
  month = ('0' + month).slice(-2);

  // 当月1日以降に発売される新刊を取得
  collection.find({
    salesDate:{
      '$gte' : dateFunc.makeGMTDate(year+month+'01')
    }
  }).toArray(function(in_err, in_results) {
    // err チェック
    if(in_err){
      _d.reject(in_err);
    }

    // 取得した新刊情報から巻数などを取り除いてマスタ情報を作成
    for(var i=0,len=in_results.length;i<len;i++){
      var comic = in_results[i],  // 新刊情報
          aryTitle = comic.title.split(' '),  // 新刊のタイトル
          masterTitle=''; // 格納用タイトル

      // 特装版などが含まれていた場合は除外する
      if(aryTitle[aryTitle.length-1].slice(-1) === '版'){
        aryTitle.pop();
      }
      // スペースでsplitした結果、最後の要素が数字だった場合は巻数込のタイトルと判断し、除外したものをマスタタイトルとする
      if(!isNaN(aryTitle[aryTitle.length-1])){
        aryTitle.pop();
        masterTitle = aryTitle.join(' ');
      }else{
        masterTitle = comic.title;
      }

      // コミックリストに追加
      in_comicList.push({
        title : masterTitle,
        publisher : comic.publisher,
        author : comic.author,
        key : cmnDtlFunc.makeSearchKey(masterTitle, comic.author)
      });
    }
    // 全て処理し終わったら次の処理へ
    _d.resolve(in_comicList);
  });
  return _d.promise;
}

module.exports = getComicListFromSales;