/**************************************************************************************************
 * モジュール名　: 漫画マスタ情報取得ビジネスロジック
 * 概要　　　　　: 漫画マスタ情報を取得する
 * 作成日　　　　: 2014/03/05
 * 更新日　　　　: 2014/04/15
 *************************************************************************************************/

// モジュール読み込み
var client = require('cheerio-httpcli'),
    deferred = require('deferred'),
    constComic = require("mod/constComic"),
    logger = require('mod/logger');

// DBに登録するコミックリスト
var comicList = [];

/**************************************************************************************************
 * 関数名　: 漫画マスタ情報取得、更新処理
 * 概要　　: 漫画マスタ情報をスクレイピングして取得し、DBに登録する。
 *************************************************************************************************/
exports.getAndSaveComicList = function(db){

  // 処理開始
  logger.info("getComicMaster START");

  // 各処理を実行する
  deferred(null)(function(){
    // スクレイピングでコミックマスタ情報を取得する
    return getComicList();
  })(function(){
    // 新刊情報からコミックマスタ情報を逆取得する
    return addComicListFromSales(db);
  })(function(){
    // 取得したコミックマスタ情報をMongoDBに登録する
    return saveComicList(db);
  }).done(function(){
    // 処理終了
    logger.info("getComicMaster END");
  });
};

/**************************************************************************************************
 * 関数名　: 漫画マスタ情報取得処理
 * 概要　　: 漫画マスタ情報をスクレイピングして取得する。
 *************************************************************************************************/
function getComicList(){

  // defferd作成
  var _def = deferred();

  // 漫画マスタ情報取得
  getComiclistBase(0, _def.resolve);

  // promiseを返却する
  return _def.promise(function(){
  });

}

/**************************************************************************************************
 * 関数名　: 漫画マスタ情報取得基幹処理
 * 概要　　: 対象の１つのURLに対してスクレイピングを行い、マスタ情報を取得する。
 * 　　　　: 対象のリストを全て処理するまで再帰的に繰り返す。
 *************************************************************************************************/
function getComiclistBase(in_subUrlIdx, in_resolve){

  // リクエスト情報
  var reqInfo = constComic.ARY_REQ_INFO[in_subUrlIdx];

  // スクレイピング開始
  client.fetch(reqInfo.url,{}, function(_e, $, _res) {
    // 正常終了の場合のみ情報を取得する
    if (!_e && _res.statusCode === 200) {
      comicList = comicList.concat(getComicInfo($, reqInfo));
    }else{
      // エラーが発生している、またはレスポンスコードが200以外の場合はエラー処理
      logger.error("getComicMaster Bad Request");
    }

    // 未取得のURLがある場合は次のURLへ
    if(in_subUrlIdx < constComic.ARY_REQ_INFO.length-1){
      getComiclistBase(in_subUrlIdx + 1, in_resolve);
    }else{
      // Defferedを解決状態にする
      in_resolve();
      // 処理終了
      return;
    }
  });
}

function getComicInfo($, reqInfo){
  var _upsertComicList = [];
  // タイトル・作者・出版社を抽出
  $("ul").each(function(_idx){
    if(reqInfo.idxF <= _idx && _idx <= reqInfo.idxT){
      var $li = $(this).find("li");
      $li.each(function(){
        var _title = $(this).find("a").eq(0).text(),
            _publisher = "",
            _author = "";
        var _etc = $(this).text().substr(_title.length)
            .split("　").join("")
            .split(" ").join("")
            .slice(1, -1),
            _aryEtc = _etc.split("、");
        if(_aryEtc.length > 1){
          _publisher = _aryEtc[_aryEtc.length - 1];
          _aryEtc.pop();
          _author = _aryEtc.join(" ");
        }else{
          _author = _etc;
        }
        // 全角スペースは半角スペースに置換
        _title = _title.split("　").join(" ");
        _publisher = _publisher.split("　").join(" ");
        _author = _author.split("　").join(" ");
        var _key = _title.split(" ").join("") + "|" + _author.split(" ").join("");
        _key = _key.toLowerCase();
        _upsertComicList.push({
          title:_title,
          publisher:_publisher,
          author:_author,
          key:_key
        });
      });
    }
  });
  return _upsertComicList;
}

function addComicListFromSales(db){
  // deferred作成
  var _def = deferred();

  // DBへの接続
  db.open(function(err, db){
    if(err){
      throw err;
    }
    // 当月1日以降に発売される新刊を取得
    var collection = db.collection("salesinfos");
    var date = new Date(),
        year = date.getFullYear()+"",
        month = date.getMonth()+1+"";
    month = ("0" + month).slice(-2);

    // 取得したコミックからマスタ情報を抽出
    collection.find({
      salesDate:{
        "$gte" : makeGMTDate(year+month+"01")
      }
    }).toArray(function(err, results) {
      for(var i=0,len=results.length;i<len;i++){
        var comic = results[i];
        var aryTitle = comic.title.split(" ");
        var masterTitle="";
        if(aryTitle[aryTitle.length-1].slice(-1) === "版"){
          aryTitle.pop();
        }
        if(!isNaN(aryTitle[aryTitle.length-1])){
          aryTitle.pop();
          masterTitle = aryTitle.join(" ");
        }else{
          masterTitle = comic.title;
        }
        var masterKey = masterTitle.split(" ").join("") + "|" + comic.author.split(" ").join("");
        masterKey = masterKey.toLowerCase();
        comicList.push({
          title : masterTitle,
          publisher : comic.publisher,
          author : comic.author,
          key : masterKey
        });
      }
      _def.resolve();
    });
  });

  return _def.promise(function(){
    db.close();
  });
}

function saveComicList(db){
  // deferred作成
  var _def = deferred();

  // DBへの接続
  db.open(function(err, db){
    if(err){
      throw err;
    }

    if(comicList.length > 0){
      var _comicCnt = comicList.length,
          _upsertCnt = 0;

      // コレクションを指定
      var collection = db.collection("comics");

      // MongoDBに登録（upsert、同一のタイトルが無ければ新規登録、あれば更新）
      for(var _i=0;_i<_comicCnt;_i++){
        collection.update(
          {title:comicList[_i].title},
          comicList[_i],
          {upsert:true},
          function(err){
            if(err){
              logger.warn(err.message);
            }
            _upsertCnt++;
            if(_upsertCnt === _comicCnt){
              _def.resolve();
            }
          }
        );
      }
    }else{
      logger.warn("getComicMaster No List");
      _def.resolve();
    }
  });

  return _def.promise(function(){
    db.close();
  });
}

function makeGMTDate(strYMD){
  var year = strYMD.substr(0, 4),
      month = strYMD.substr(4, 2),
      day = strYMD.substr(6, 2);
  return new Date(year + "-" + month + "-" + day + "T00:00:00.000+09:00");
}
